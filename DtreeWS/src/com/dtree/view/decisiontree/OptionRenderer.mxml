<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:parsley="http://www.spicefactory.org/parsley" xmlns:core="com.dtree.view.decisiontree.core.*"
	autoDrawBackground="false" minHeight="25" mouseDown="{model.isLocked = false}" dataChange="dataChangeHandler(event)" width="100%" doubleClickEnabled="true" doubleClick="doubleClickHandler(event)">
	<fx:Metadata>
		[Event(name="CONNECT_STATUS_CHANGE", type="com.dtree.events.DecisionTreeEvent")]
		[ManagedEvents("CONNECT_STATUS_CHANGE")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import com.dtree.common.Util;
			import com.dtree.events.DecisionTreeEvent;
			import com.dtree.view.decisiontree.core.DTreeOutputJack;
			import com.dtree.view.decisiontree.core.SimpleDataModel;
			import com.flextoolbox.controls.WireSurface;
			import com.flextoolbox.events.WireJackEvent;
			import mx.events.FlexEvent;

			[Inject] [Bindable] public var surface: WireSurface;
			[Inject] [Bindable] public var model: SimpleDataModel;

			private function dispatchConnectEvent(): void
			{
				dispatchEvent(new DecisionTreeEvent(optionJack, DecisionTreeEvent.CONNECT_STATUS_CHANGE));
			}

			private function questionJackConnectHandler(event:WireJackEvent):void
			{
				if(event.otherJack is DTreeOutputJack)
				{
					var xml: XML = XML(DTreeOutputJack(event.otherJack).dtreeData);
					var isQuestion: Boolean = String(xml.name()).toLowerCase() == "question";
					optionJack.toolTip = isQuestion ? xml.QuestionName.toString() : xml.TerminatingOptionText.toString();
					/* if(new XMLListCollection(XML(DTreeOutputJack(event.otherJack).dtreeData).Options..OptionName).getItemIndex(XML(data)) != -1 && optionJack.connectedJacks.indexOf(event.otherJack) != -1)
					{
						optionJack.disconnect(event.otherJack);
					}
					else */
					{
						dispatchConnectEvent();
					}
					bgRect.fill = bgClr;
				}
			}

			private function dataChangeHandler(event: FlexEvent):void
			{
				bgRectCorrectAns.fill = null;
				if(DTreeGlobals.yn(data))
				{
					bgRectCorrectAns.fill = bgClrRightAns;
					description.styleName = "answerState";
				}
				else if(DTreeGlobals.isOOPS(data))
				{
					bgRectCorrectAns.fill = bgClrOOPSAns;
					description.styleName = "oopsState";
				}
			}

			private function questionJackDisconnectHandler(event: WireJackEvent):void
			{
				optionJack.toolTip = "";
				dispatchConnectEvent();
				bgRect.fill = null;
			}

			public function disConnectAll(): void
			{
				optionJack.disconnectAll();
			}

			private function doubleClickHandler(event:MouseEvent):void
			{
				disConnectAll();
				questionJackDisconnectHandler(null);
				Util.killEvent(event);
			}

			[Bindable] private var bgAlpha: Number = .4;
		]]>
	</fx:Script>
	<fx:Declarations>
		<parsley:Configure/>
		<s:LinearGradient id="bgClr" rotation="90">
			<s:entries>
				<s:GradientEntry color="0xFFFF00"/>
				<s:GradientEntry color="0xDDDD00"/>
				<s:GradientEntry color="0xBBBB00"/>
			</s:entries>
		</s:LinearGradient>
		<s:LinearGradient id="bgClrRightAns" rotation="90">
			<s:entries>
				<s:GradientEntry color="0x00EE00"/>
				<s:GradientEntry color="0x00CC00"/>
				<s:GradientEntry color="0x00AA00"/>
			</s:entries>
		</s:LinearGradient>
		<s:LinearGradient id="bgClrOOPSAns" rotation="90">
			<s:entries>
				<s:GradientEntry color="0xEE0000"/>
				<s:GradientEntry color="0x00CC00"/>
				<s:GradientEntry color="0xAA0000"/>
			</s:entries>
		</s:LinearGradient>
	</fx:Declarations>
	<s:states>
		<s:State name="normal" />
		<s:State name="hovered" />
		<s:State name="selected" />
	</s:states>
	<s:Rect radiusX="0" radiusY="0" width="100%" height="100%" horizontalCenter="0" verticalCenter="0" id="bgRect" alpha="{bgAlpha}"/>
	<s:Rect radiusX="0" radiusY="0" width="100%" height="100%" horizontalCenter="0" verticalCenter="0" id="bgRectCorrectAns" alpha="0.15"/>
	<s:Group width="100%" id="renderGrp" height="100%">
		<s:layout>
			<s:HorizontalLayout verticalAlign="middle" horizontalAlign="center" paddingBottom="1" paddingLeft="1" paddingRight="1" paddingTop="1"/>
		</s:layout>
		<s:Label id="description" text="{XML(data).@OptionText}" width="100%" textAlign="justify" maxDisplayedLines="1" showTruncationTip="true"/>
		<core:DTreeInputJack id="optionJack" wireManager="{surface}" mouseDown="Util.killEvent(event); model.isLocked = true" styleName="myCustomizedJack"
							 mouseUp="model.isLocked = false" connectWire="questionJackConnectHandler(event)" dtreeData="{data}" disconnectWire="questionJackDisconnectHandler(event)"/>
	</s:Group>
</s:ItemRenderer>