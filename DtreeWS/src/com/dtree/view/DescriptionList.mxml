<?xml version="1.0" encoding="utf-8"?>
<common:DtreePanel xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:parsley="http://www.spicefactory.org/parsley" xmlns:common="com.dtree.view.common.*"
	xmlns:c="com.dtree.view.comps.*" xmlns:d="com.dtree.view.description.*" title.questionList="{ResourceStrings.QUESTION_LIST}" title.decisionTree="{ResourceStrings.DECISION_TREE_LIST}"
	title.randomQuestionList="{ResourceStrings.QUESTION_PLACEHOLDERS}" title.terminatingActionList="{ResourceStrings.TERMINATINGACTIONS_LIST}" minHeight="95" minWidth="350" height="200" width="400" maxHeight="900" y="100" x="100"
	controlBarVisible="false" currentStateChange="refreshList(event)">
	<common:layout>
		<s:VerticalLayout gap="1"/>
	</common:layout>
	<fx:Metadata>
		[Event(name="QUESTION_LIST", type="com.dtree.events.DecisionTreeEvent")]
		[Event(name="DECISIONTREE_LIST", type="com.dtree.events.DecisionTreeEvent")]
		[Event(name="TERMINATINGACTION_LIST", type="com.dtree.events.DecisionTreeEvent")]
		[Event(name="CATEGORY_LIST", type="com.dtree.events.DecisionTreeEvent")]
		[ManagedEvents("QUESTION_LIST, DECISIONTREE_LIST, TERMINATINGACTION_LIST, CATEGORY_LIST")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import com.dtree.common.ResourceStrings;
			import com.dtree.events.DTreeTabEvent;
			import com.dtree.events.DecisionTreeEvent;
			import com.dtree.model.presentation.DtreeModel;
			import com.dtree.view.common.AssetLocator;
			
			[Init]
			public function initView(): void
			{
				closeButton.visible = false;
				collapseButton.visible = false;
				if(currentState == "questionList")
				{
					refreshCategoryClick(null);
				}
			}

			[Bindable]
			[Inject]
			public var dtreeModel:DtreeModel;

			private function searchClick(e: MouseEvent): void
			{
				var eventType: String = null;
				switch(currentState)
				{
					case "randomQuestionList": break;
					case "questionList": eventType = DecisionTreeEvent.QUESTION_LIST; break;
					case "decisionTree": eventType = DecisionTreeEvent.DECISIONTREE_LIST; break;
					case "terminatingActionList": eventType = DecisionTreeEvent.TERMINATINGACTION_LIST; break;
				}
				if(eventType != null)
				{
					var data: *;
					if(currentState == "questionList")
					{
						var catID: * = categoryList.selectedItem ? categoryList.selectedItem.@AssessmentQuestionCategoryId.toString() : "";
						data = {srarchStr: textInput.text, categoryID: catID};
					}
					else
					{
						data = textInput.text;
					}
					dispatchEvent(new DecisionTreeEvent(data, eventType));
				}
			}

			private function refreshCategoryClick(e: MouseEvent): void
			{
				dispatchEvent(new DecisionTreeEvent(null, DecisionTreeEvent.CATEGORY_LIST));
			}

			private function textInputKeyUpHandler(e: KeyboardEvent):void
			{
				if(e.keyCode == Keyboard.ENTER)
				{
					searchClick(null);
				}
			}

			[Command(selector="REFRESH_CATEGORY_LIST")]
			public function updateCategoryList(e: DecisionTreeEvent): void
			{
				categoryList.selectedIndex = dtreeModel.categoryList.length - 1;
				refreshList(null);
			}

			[Inject]
			public var nav: DTreeTabNavigator;

			private function rbClick(e: MouseEvent): void
			{
				var newState: String = null;
				if(qListRB.selected)
				{
					newState = "questionList";
					if(nav!= null)
					{
						var tab: DTreeTabContent = DTreeTabContent(nav.selectedChild);
						if(tab != null && tab.isRandom)
						{
							newState = "randomQuestionList";
						}
					}
				}
				else if(taListRB.selected)
				{
					newState = "terminatingActionList";
				}
				else if(dtListRB.selected)
				{
					newState = "decisionTree";
				}
				if(newState != null && currentState != newState)
				{
					currentState = newState;
				}
			}

			private function categoryLabelFunc(item: Object): String
			{
				return XML(item).@CategoryName;
			}

			private function refreshList(e: Event): void
			{
				if(listCtl.currentState != currentState)
				{
					listCtl.currentState = currentState;
				}
				if(listCtl.list != null && listCtl.list.dataProvider != null && listCtl.list.dataProvider.length == 0)
				{
					searchClick(null);
				}
			}

			[Command(selector="DTREE_TYPE_CHANGE")]
			public function changeDTtreeType(e: DTreeTabEvent): void
			{
				rbClick(null);
			}

			[Command(selector="REFRESH_DESCRIPTION_LIST")]
			public function tabClosed(e: DTreeTabEvent): void
			{
				rbClick(null);
			}
		]]>
	</fx:Script>
	<common:states>
		<s:State name="randomQuestionList"/>
		<s:State name="questionList"/>
		<s:State name="terminatingActionList"/>
		<s:State name="decisionTree"/>
	</common:states>
	<fx:Declarations>
		<parsley:Configure/>
	</fx:Declarations>
	<s:Group width="100%">
		<s:Rect radiusX="0" radiusY="0" width="100%" height="100%" horizontalCenter="0" verticalCenter="0">
			<s:fill>
				<s:SolidColor id="hdrBgClr" color="0xFFFFFF" alpha="0.6"/>
			</s:fill>
			<s:stroke>
				<s:LinearGradientStroke rotation="90" weight="1">
					<s:GradientEntry color="0xFFFFFF"/>
					<s:GradientEntry color="0xA8A8A8"/>
				</s:LinearGradientStroke>
			</s:stroke>
		</s:Rect>
		<s:VGroup width="100%" paddingLeft="1" paddingRight="1" paddingTop="1" horizontalAlign="center" verticalAlign="middle" gap="1">
			<s:HGroup width="100%" horizontalAlign="left" verticalAlign="middle" gap="2" paddingLeft="1" paddingRight="1" paddingBottom="1">
				<s:RadioButton id="qListRB" selected="true" groupName="listtype" click="rbClick(event)" label="{ResourceStrings.QUESTION_LIST}"/>
				<s:RadioButton id="taListRB" selected="false" groupName="listtype" click="rbClick(event)" label="{ResourceStrings.TERMINATINGACTIONS_LIST}"/>
				<s:RadioButton id="dtListRB" selected="false" groupName="listtype" click="rbClick(event)" label="{ResourceStrings.DECISION_TREE_LIST}"/>
			</s:HGroup>
			<s:HGroup width="100%" horizontalAlign="center" verticalAlign="middle" gap="2" paddingLeft="1" paddingRight="1" excludeFrom="randomQuestionList">
				<s:VGroup width="100%" horizontalAlign="center" verticalAlign="middle" gap="2" paddingLeft="1" paddingRight="1">
					<s:HGroup width="100%" horizontalAlign="center" verticalAlign="middle" gap="2" paddingLeft="1" paddingRight="1" includeIn="questionList" paddingBottom="1">
						<s:Label text="{ResourceStrings.SELECT_CATEGORY}"/>
						<s:DropDownList width="100%" height="25" id="categoryList" dataProvider="{dtreeModel.categoryList}" enabled="{dtreeModel.enabled}" horizontalScrollPolicy="off"
							alternatingItemColors="[0xFFFFFF, 0xEEEEEE]" labelFunction="categoryLabelFunc"/>
						<c:IconButton skinClass="com.dtree.view.comps.skins.IconButtonSkin" id="refreshCategoryBtn" showErrorTip="true" toolTip="{ResourceStrings.REFRESH}" click="refreshCategoryClick(event)"
							buttonMode="true" enabled="{dtreeModel.enabled}" icon="{AssetLocator.REFRESH_NORMAL}" overIcon="{AssetLocator.REFRESH_ROLLOVER}" downIcon="{AssetLocator.REFRESH_DOWN}"
							disabledIcon="{AssetLocator.REFRESH_DISABLE}"/>
					</s:HGroup>
					<s:TextInput width="100%" height="25" id="textInput" enabled="{dtreeModel.enabled}" keyUp="textInputKeyUpHandler(event)"/>
				</s:VGroup>
				<c:IconButton skinClass="com.dtree.view.comps.skins.IconButtonSkin" id="searchBtn" height="100%" showErrorTip="true" label="{ResourceStrings.SEARCH}" click="searchClick(event)" enabled="{dtreeModel.enabled}"
								 icon="{AssetLocator.SEARCH_NORMAL}" overIcon="{AssetLocator.SEARCH_ROLLOVER}" downIcon="{AssetLocator.SEARCH_DOWN}" disabledIcon="{AssetLocator.SEARCH_DISABLE}" buttonMode="true"/>

			</s:HGroup>
		</s:VGroup>
	</s:Group>
	<d:DescriptionListControl id="listCtl" currentState="{currentState}"/>
</common:DtreePanel>